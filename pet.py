from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from base import dp, bot
from aiogram.types import Message
from aiogram import types
from emoji import emojize
import base
import games as game


@dp.callback_query(F.data == 'create_pet')
async def pre_create_pet(callback: CallbackQuery):
    game.game_data[callback.from_user.id] = ['create_pet']
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞')


async def create_pet(message: Message):
    try:
        name = message.text.split()[0].replace('/', '').capitalize()
        base.create_pet(message.from_user.id, name)
        game.game_data.pop(message.from_user.id)
        await message.answer(f'–ü–∏—Ç–æ–º–µ—Ü —Å –∏–º–µ–Ω–µ–º {name} —Å–æ–∑–¥–∞–Ω')
    except:
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')


@dp.callback_query(F.data == 'feed')
async def feed_pet(callback: CallbackQuery):
    try:
        pet = base.get_pet_info(callback.from_user.id)
        if pet[1] <= 0:
            await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–º–∞')
        elif pet[7] == pet[9]:
            await callback.message.answer('–ü–∏—Ç–æ–º–µ—Ü —Å—ã—Ç')
        else:
            base.feed_pet(callback.from_user.id, pet)
            await callback.message.answer('–ü–∏—Ç–æ–º–µ—Ü –Ω–∞–∫–æ—Ä–º–ª–µ–Ω!')
    except Exception as ex:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(ex)


@dp.message(Command('info'))
async def get_pet_info(message: Message):
    pet_info = base.get_pet_info(message.from_user.id)
    builder = InlineKeyboardBuilder()
    if pet_info[2] == None:
        # –µ—Å–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –µ—â—ë –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
        builder.add(types.InlineKeyboardButton(
            text="–°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞",
            callback_data="create_pet")
        )
        await message.answer('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞', reply_markup=builder.as_markup())
    else:
        builder.row(types.InlineKeyboardButton(
            text=emojize("–ò–≥—Ä—ã :video_game:"),
            callback_data="games")
        )

        builder.row(types.InlineKeyboardButton(
            text=emojize("–ú–∞–≥–∞–∑–∏–Ω :money_with_wings:"),
            callback_data="assortment")
        )

        builder.row(types.InlineKeyboardButton(
            text=emojize("–ü–æ–∫–æ—Ä–º–∏—Ç—å :paw_prints:"),
            callback_data="feed")
        )
        await message.answer(
            f'''
            { pet_info[6] } \n –ï–¥–∞: {pet_info[7]} / {pet_info[9]} \n –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {pet_info[8]} / { pet_info[10]} \n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–∞: { pet_info[1] } \n –ú–æ–Ω–µ—Ç: { pet_info[4] }ü™ô
            ''',
            reply_markup=builder.as_markup()
        )

