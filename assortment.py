from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from base import dp, bot
from aiogram import types
import base


# –Ω–∞ –¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä–º, –Ω–æ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—Å—è –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å
@dp.callback_query(F.data == 'assortment')
async def get_assortment(callback: CallbackQuery):
    await callback.message.delete()
    builder = InlineKeyboardBuilder().add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –∫–æ—Ä–º –∑–∞ 2 ü™ô",
        callback_data="buy_food")
    )
    await callback.message.answer(f"–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:", reply_markup=builder.as_markup())


@dp.callback_query(F.data == 'buy_food')
async def buy_food(callback: CallbackQuery):
    await callback.message.delete()
    try:
        food_price = 2
        if base.get_pet_info(callback.from_user.id)[4] >= food_price:
            base.buy_food(callback.from_user.id, food_price)
            await callback.message.answer('–ö–æ—Ä–º —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω')
        else:
            await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô')
    except Exception as ex:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(ex)
